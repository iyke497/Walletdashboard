"""Add mining models

Revision ID: 417c84e0f751
Revises: 186464ad2f1c
Create Date: 2025-06-13 16:56:45.116338

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '417c84e0f751'
down_revision = '186464ad2f1c'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('mining_pools',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('asset_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('algorithm', sa.Enum('SHA256', 'SCRYPT', 'ETHASH', 'X11', 'EQUIHASH', 'CRYPTONIGHT', 'BLAKE2B', 'RANDOMX', name='miningalgorithm'), nullable=False),
    sa.Column('pool_fee', sa.Numeric(precision=5, scale=4), nullable=False),
    sa.Column('difficulty', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'VERY_HIGH', name='miningdifficulty'), nullable=False),
    sa.Column('min_hashrate', sa.Numeric(precision=20, scale=8), nullable=False),
    sa.Column('min_hashrate_unit', sa.Enum('HASH_S', 'KILOHASH_S', 'MEGAHASH_S', 'GIGAHASH_S', 'TERAHASH_S', 'PETAHASH_S', name='hashrateunit'), nullable=False),
    sa.Column('estimated_daily_earnings_per_unit', sa.Numeric(precision=20, scale=8), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('total_hashrate', sa.Numeric(precision=20, scale=8), nullable=True),
    sa.Column('total_hashrate_unit', sa.Enum('HASH_S', 'KILOHASH_S', 'MEGAHASH_S', 'GIGAHASH_S', 'TERAHASH_S', 'PETAHASH_S', name='hashrateunit'), nullable=True),
    sa.Column('active_miners', sa.Integer(), nullable=True),
    sa.Column('blocks_found_24h', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint('estimated_daily_earnings_per_unit >= 0', name='ck_earnings_non_negative'),
    sa.CheckConstraint('min_hashrate > 0', name='ck_min_hashrate_positive'),
    sa.CheckConstraint('pool_fee >= 0 AND pool_fee <= 1', name='ck_pool_fee_range'),
    sa.ForeignKeyConstraint(['asset_id'], ['assets.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('mining_pools', schema=None) as batch_op:
        batch_op.create_index('idx_mining_pool_active', ['is_active'], unique=False)
        batch_op.create_index('idx_mining_pool_algorithm', ['algorithm'], unique=False)
        batch_op.create_index(batch_op.f('ix_mining_pools_algorithm'), ['algorithm'], unique=False)
        batch_op.create_index(batch_op.f('ix_mining_pools_asset_id'), ['asset_id'], unique=False)

    op.create_table('hashrate_packages',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('pool_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('hashrate', sa.Numeric(precision=20, scale=8), nullable=False),
    sa.Column('hashrate_unit', sa.Enum('HASH_S', 'KILOHASH_S', 'MEGAHASH_S', 'GIGAHASH_S', 'TERAHASH_S', 'PETAHASH_S', name='hashrateunit'), nullable=False),
    sa.Column('monthly_cost_usd', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('power_consumption_watts', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('sort_order', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint('hashrate > 0', name='ck_hashrate_positive'),
    sa.CheckConstraint('monthly_cost_usd > 0', name='ck_cost_positive'),
    sa.CheckConstraint('power_consumption_watts >= 0', name='ck_power_non_negative'),
    sa.ForeignKeyConstraint(['pool_id'], ['mining_pools.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('hashrate_packages', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_hashrate_packages_pool_id'), ['pool_id'], unique=False)

    op.create_table('mining_pool_stats',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('pool_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('total_hashrate', sa.Numeric(precision=20, scale=8), nullable=False),
    sa.Column('total_hashrate_unit', sa.Enum('HASH_S', 'KILOHASH_S', 'MEGAHASH_S', 'GIGAHASH_S', 'TERAHASH_S', 'PETAHASH_S', name='hashrateunit'), nullable=False),
    sa.Column('active_miners', sa.Integer(), nullable=True),
    sa.Column('blocks_found', sa.Integer(), nullable=True),
    sa.Column('average_block_time_minutes', sa.Numeric(precision=8, scale=2), nullable=True),
    sa.Column('pool_luck_percentage', sa.Numeric(precision=6, scale=2), nullable=True),
    sa.Column('network_difficulty', sa.Numeric(precision=30, scale=8), nullable=True),
    sa.Column('total_rewards_distributed', sa.Numeric(precision=30, scale=18), nullable=True),
    sa.Column('average_earnings_per_th', sa.Numeric(precision=20, scale=8), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint('active_miners >= 0', name='ck_stats_miners_non_negative'),
    sa.CheckConstraint('blocks_found >= 0', name='ck_stats_blocks_non_negative'),
    sa.CheckConstraint('total_hashrate > 0', name='ck_stats_hashrate_positive'),
    sa.ForeignKeyConstraint(['pool_id'], ['mining_pools.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('pool_id', 'date', name='uq_pool_stats_date')
    )
    with op.batch_alter_table('mining_pool_stats', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_mining_pool_stats_date'), ['date'], unique=False)
        batch_op.create_index(batch_op.f('ix_mining_pool_stats_pool_id'), ['pool_id'], unique=False)

    op.create_table('mining_contracts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('pool_id', sa.Integer(), nullable=False),
    sa.Column('package_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(length=100), nullable=True),
    sa.Column('hashrate', sa.Numeric(precision=20, scale=8), nullable=False),
    sa.Column('hashrate_unit', sa.Enum('HASH_S', 'KILOHASH_S', 'MEGAHASH_S', 'GIGAHASH_S', 'TERAHASH_S', 'PETAHASH_S', name='hashrateunit'), nullable=False),
    sa.Column('duration_months', sa.Integer(), nullable=False),
    sa.Column('monthly_cost_usd', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('total_cost_usd', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'ACTIVE', 'PAUSED', 'COMPLETED', 'CANCELLED', 'EXPIRED', name='miningcontractstatus'), nullable=True),
    sa.Column('start_date', sa.DateTime(), nullable=True),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('payment_date', sa.DateTime(), nullable=True),
    sa.Column('current_hashrate', sa.Numeric(precision=20, scale=8), nullable=True),
    sa.Column('uptime_percentage', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('total_earnings_usd', sa.Numeric(precision=15, scale=8), nullable=True),
    sa.Column('last_active_at', sa.DateTime(), nullable=True),
    sa.Column('power_consumption_watts', sa.Integer(), nullable=True),
    sa.Column('hardware_type', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint('duration_months > 0', name='ck_duration_positive'),
    sa.CheckConstraint('hashrate > 0', name='ck_contract_hashrate_positive'),
    sa.CheckConstraint('monthly_cost_usd > 0', name='ck_monthly_cost_positive'),
    sa.CheckConstraint('total_cost_usd > 0', name='ck_total_cost_positive'),
    sa.CheckConstraint('uptime_percentage >= 0 AND uptime_percentage <= 100', name='ck_uptime_range'),
    sa.ForeignKeyConstraint(['package_id'], ['hashrate_packages.id'], ),
    sa.ForeignKeyConstraint(['pool_id'], ['mining_pools.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('mining_contracts', schema=None) as batch_op:
        batch_op.create_index('idx_mining_contract_dates', ['start_date', 'end_date'], unique=False)
        batch_op.create_index('idx_mining_contract_user_status', ['user_id', 'status'], unique=False)
        batch_op.create_index(batch_op.f('ix_mining_contracts_pool_id'), ['pool_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_mining_contracts_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('ix_mining_contracts_user_id'), ['user_id'], unique=False)

    op.create_table('mining_earnings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('contract_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('amount_mined', sa.Numeric(precision=30, scale=18), nullable=False),
    sa.Column('amount_usd', sa.Numeric(precision=15, scale=8), nullable=False),
    sa.Column('hashrate_used', sa.Numeric(precision=20, scale=8), nullable=False),
    sa.Column('uptime_hours', sa.Numeric(precision=4, scale=2), nullable=True),
    sa.Column('pool_fee_amount', sa.Numeric(precision=30, scale=18), nullable=True),
    sa.Column('blocks_found', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'PAID', 'CANCELLED', name='miningearningsstatus'), nullable=True),
    sa.Column('paid_at', sa.DateTime(), nullable=True),
    sa.Column('transaction_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint('amount_mined >= 0', name='ck_amount_mined_non_negative'),
    sa.CheckConstraint('amount_usd >= 0', name='ck_amount_usd_non_negative'),
    sa.CheckConstraint('hashrate_used >= 0', name='ck_hashrate_used_non_negative'),
    sa.CheckConstraint('pool_fee_amount >= 0', name='ck_pool_fee_non_negative'),
    sa.CheckConstraint('uptime_hours >= 0 AND uptime_hours <= 24', name='ck_uptime_hours_range'),
    sa.ForeignKeyConstraint(['contract_id'], ['mining_contracts.id'], ),
    sa.ForeignKeyConstraint(['transaction_id'], ['transactions.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('contract_id', 'date', name='uq_contract_earning_date')
    )
    with op.batch_alter_table('mining_earnings', schema=None) as batch_op:
        batch_op.create_index('idx_mining_earnings_date_status', ['date', 'status'], unique=False)
        batch_op.create_index(batch_op.f('ix_mining_earnings_contract_id'), ['contract_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_mining_earnings_date'), ['date'], unique=False)
        batch_op.create_index(batch_op.f('ix_mining_earnings_status'), ['status'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('mining_earnings', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_mining_earnings_status'))
        batch_op.drop_index(batch_op.f('ix_mining_earnings_date'))
        batch_op.drop_index(batch_op.f('ix_mining_earnings_contract_id'))
        batch_op.drop_index('idx_mining_earnings_date_status')

    op.drop_table('mining_earnings')
    with op.batch_alter_table('mining_contracts', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_mining_contracts_user_id'))
        batch_op.drop_index(batch_op.f('ix_mining_contracts_status'))
        batch_op.drop_index(batch_op.f('ix_mining_contracts_pool_id'))
        batch_op.drop_index('idx_mining_contract_user_status')
        batch_op.drop_index('idx_mining_contract_dates')

    op.drop_table('mining_contracts')
    with op.batch_alter_table('mining_pool_stats', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_mining_pool_stats_pool_id'))
        batch_op.drop_index(batch_op.f('ix_mining_pool_stats_date'))

    op.drop_table('mining_pool_stats')
    with op.batch_alter_table('hashrate_packages', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_hashrate_packages_pool_id'))

    op.drop_table('hashrate_packages')
    with op.batch_alter_table('mining_pools', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_mining_pools_asset_id'))
        batch_op.drop_index(batch_op.f('ix_mining_pools_algorithm'))
        batch_op.drop_index('idx_mining_pool_algorithm')
        batch_op.drop_index('idx_mining_pool_active')

    op.drop_table('mining_pools')
    # ### end Alembic commands ###
